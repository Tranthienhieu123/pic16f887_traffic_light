CCS PCM C Compiler, Version 5.015, 5967               15-Jun-25 09:55

               Filename:   E:\University\Nam 3\2024_2025_HK2\PIC16f887_Traffic_light\Traffic_light.lst

               ROM used:   1474 words (18%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           33 (9%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   543
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   03F
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  C0
0036:  RETLW  F9
0037:  RETLW  A4
0038:  RETLW  B0
0039:  RETLW  99
003A:  RETLW  92
003B:  RETLW  82
003C:  RETLW  F8
003D:  RETLW  80
003E:  RETLW  90
*
022E:  MOVF   37,W
022F:  CLRF   78
0230:  SUBWF  36,W
0231:  BTFSC  03.0
0232:  GOTO   236
0233:  MOVF   36,W
0234:  MOVWF  77
0235:  GOTO   242
0236:  CLRF   77
0237:  MOVLW  08
0238:  MOVWF  38
0239:  RLF    36,F
023A:  RLF    77,F
023B:  MOVF   37,W
023C:  SUBWF  77,W
023D:  BTFSC  03.0
023E:  MOVWF  77
023F:  RLF    78,F
0240:  DECFSZ 38,F
0241:  GOTO   239
0242:  RETURN
0243:  MOVF   36,W
0244:  ANDLW  07
0245:  MOVWF  77
0246:  RRF    36,W
0247:  MOVWF  78
0248:  RRF    78,F
0249:  RRF    78,F
024A:  MOVLW  1F
024B:  ANDWF  78,F
024C:  MOVF   78,W
024D:  ADDWF  38,W
024E:  MOVWF  04
024F:  BCF    03.7
0250:  BTFSC  39.0
0251:  BSF    03.7
0252:  CLRF   78
0253:  INCF   78,F
0254:  INCF   77,F
0255:  GOTO   257
0256:  RLF    78,F
0257:  DECFSZ 77,F
0258:  GOTO   256
0259:  MOVF   37,F
025A:  BTFSC  03.2
025B:  GOTO   25F
025C:  MOVF   78,W
025D:  IORWF  00,F
025E:  GOTO   262
025F:  COMF   78,F
0260:  MOVF   78,W
0261:  ANDWF  00,F
0262:  RETURN
....................  
.................... #list 
....................  
.................... #fuses intrc_io 
.................... #use delay (clock=8M) 
*
0054:  MOVLW  36
0055:  MOVWF  04
0056:  BCF    03.7
0057:  MOVF   00,W
0058:  BTFSC  03.2
0059:  GOTO   067
005A:  MOVLW  02
005B:  MOVWF  78
005C:  CLRF   77
005D:  DECFSZ 77,F
005E:  GOTO   05D
005F:  DECFSZ 78,F
0060:  GOTO   05C
0061:  MOVLW  97
0062:  MOVWF  77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  DECFSZ 00,F
0066:  GOTO   05A
0067:  RETURN
....................  
.................... //button 
.................... #define     MODE            pin_c0 
.................... #define     RED             pin_c1 
.................... #define     ALL_RED         pin_c2 
.................... #define     GREEN           pin_c3 
....................  
.................... //button 
.................... #define     RIGHT14         pin_c4 
.................... #define     LEFT14          pin_c5 
.................... #define     RIGHT23         pin_c6 
.................... #define     LEFT23          pin_c7 
....................  
.................... //led 
.................... #define     RED14           pin_b0 
.................... #define     YELLOW14        pin_b1 
.................... #define     GREEN14         pin_b2 
....................  
.................... //led 
.................... #define     RED23           pin_b3 
.................... #define     YELLOW23        pin_b4 
.................... #define     GREEN23         pin_b5 
....................  
.................... //led 
.................... #define     TURN_RIGHT14    pin_b6 
.................... #define     TURN_LEFT14     pin_b7 
.................... #define     TURN_LEFT23     pin_e0 
.................... #define     TURN_RIGHT23    pin_e1 
....................  
.................... //time 
.................... #define     sec_red14         15  
.................... #define     sec_yellow14      4 
.................... #define     sec_green14       11 
....................  
.................... //time 
.................... #define     sec_red23         15 //always equal to sec_green14 + sec_yellow14 
.................... #define     sec_yellow23      4 
.................... #define     sec_green23       6 
....................  
.................... //declare variable 
.................... const unsigned int8     m7d[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
.................... unsigned int16          bdn_tmr1=0, sec=0; //bdn: interrupt variable 
.................... int8                    count_14=0, count_23=0, sel=0, light=0; 
.................... int1 right_14=0, left_14=0, right_23=0, left_23=0; 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////interrupt 
.................... #int_timer1 
.................... void interrupt_timer1() 
.................... { 
....................    bdn_tmr1++; 
*
003F:  INCF   27,F
0040:  BTFSC  03.2
0041:  INCF   28,F
....................    set_timer1(3036); 
0042:  CLRF   0E
0043:  MOVLW  0B
0044:  MOVWF  0F
0045:  MOVLW  DC
0046:  MOVWF  0E
....................    if(sec == sec_green14 + sec_yellow14 + sec_red14) sec=0; 
0047:  MOVF   29,W
0048:  SUBLW  1E
0049:  BTFSS  03.2
004A:  GOTO   050
004B:  MOVF   2A,F
004C:  BTFSS  03.2
004D:  GOTO   050
004E:  CLRF   2A
004F:  CLRF   29
0050:  BCF    0C.0
0051:  BCF    0A.3
0052:  BCF    0A.4
0053:  GOTO   01D
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////select mode 
.................... void select_mode() 
.................... { 
....................    if(input(MODE) == 0) 
*
0068:  BSF    30.0
0069:  MOVF   30,W
006A:  BSF    03.5
006B:  MOVWF  07
006C:  BCF    03.5
006D:  BTFSC  07.0
006E:  GOTO   0BF
....................    { 
....................       delay_ms(20); 
006F:  MOVLW  14
0070:  MOVWF  36
0071:  CALL   054
....................       if(input(MODE) == 0) 
0072:  BSF    30.0
0073:  MOVF   30,W
0074:  BSF    03.5
0075:  MOVWF  07
0076:  BCF    03.5
0077:  BTFSC  07.0
0078:  GOTO   0BF
....................       { 
....................          if(sel < 2)    
0079:  MOVF   2D,W
007A:  SUBLW  01
007B:  BTFSS  03.0
007C:  GOTO   0B7
....................          { 
....................             sel++; 
007D:  INCF   2D,F
....................              
....................             output_low(GREEN14);          output_low(YELLOW14);       output_low(RED14); 
007E:  BSF    03.5
007F:  BCF    06.2
0080:  BCF    03.5
0081:  BCF    06.2
0082:  BSF    03.5
0083:  BCF    06.1
0084:  BCF    03.5
0085:  BCF    06.1
0086:  BSF    03.5
0087:  BCF    06.0
0088:  BCF    03.5
0089:  BCF    06.0
....................             output_low(TURN_LEFT14);      output_low(TURN_LEFT23);    output_low(TURN_RIGHT14);     output_low(TURN_RIGHT23); 
008A:  BSF    03.5
008B:  BCF    06.7
008C:  BCF    03.5
008D:  BCF    06.7
008E:  BSF    03.5
008F:  BCF    09.0
0090:  BCF    03.5
0091:  BCF    09.0
0092:  BSF    03.5
0093:  BCF    06.6
0094:  BCF    03.5
0095:  BCF    06.6
0096:  BSF    03.5
0097:  BCF    09.1
0098:  BCF    03.5
0099:  BCF    09.1
....................           
....................             output_low(GREEN23);          output_low(YELLOW23);      output_low(RED23); 
009A:  BSF    03.5
009B:  BCF    06.5
009C:  BCF    03.5
009D:  BCF    06.5
009E:  BSF    03.5
009F:  BCF    06.4
00A0:  BCF    03.5
00A1:  BCF    06.4
00A2:  BSF    03.5
00A3:  BCF    06.3
00A4:  BCF    03.5
00A5:  BCF    06.3
....................             output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_low(TURN_RIGHT14);     output_low(TURN_RIGHT23); 
00A6:  BSF    03.5
00A7:  BCF    06.7
00A8:  BCF    03.5
00A9:  BCF    06.7
00AA:  BSF    03.5
00AB:  BCF    09.0
00AC:  BCF    03.5
00AD:  BCF    09.0
00AE:  BSF    03.5
00AF:  BCF    06.6
00B0:  BCF    03.5
00B1:  BCF    06.6
00B2:  BSF    03.5
00B3:  BCF    09.1
00B4:  BCF    03.5
00B5:  BCF    09.1
....................          } 
00B6:  GOTO   0B8
....................          else  
....................          { 
....................             sel=0; 
00B7:  CLRF   2D
....................          } 
....................          while(input(MODE) == 0); 
00B8:  BSF    30.0
00B9:  MOVF   30,W
00BA:  BSF    03.5
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BTFSS  07.0
00BE:  GOTO   0B8
....................       } 
....................    } 
00BF:  BCF    0A.3
00C0:  BCF    0A.4
00C1:  GOTO   584 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////mode0 
.................... void traffic_light() 
.................... { 
....................    if (bdn_tmr1 >= 4)  
00C2:  MOVF   28,F
00C3:  BTFSS  03.2
00C4:  GOTO   0C9
00C5:  MOVF   27,W
00C6:  SUBLW  03
00C7:  BTFSC  03.0
00C8:  GOTO   22B
....................    { 
....................       bdn_tmr1 = 0; 
00C9:  CLRF   28
00CA:  CLRF   27
....................       sec++; 
00CB:  INCF   29,F
00CC:  BTFSC  03.2
00CD:  INCF   2A,F
....................  
....................       if (sec <= sec_green14) //GREEN14, RED23 
00CE:  MOVF   2A,F
00CF:  BTFSS  03.2
00D0:  GOTO   114
00D1:  MOVF   29,W
00D2:  SUBLW  0B
00D3:  BTFSS  03.0
00D4:  GOTO   114
....................       { 
....................          output_high(GREEN14);         output_low(YELLOW14);       output_low(RED14); 
00D5:  BSF    03.5
00D6:  BCF    06.2
00D7:  BCF    03.5
00D8:  BSF    06.2
00D9:  BSF    03.5
00DA:  BCF    06.1
00DB:  BCF    03.5
00DC:  BCF    06.1
00DD:  BSF    03.5
00DE:  BCF    06.0
00DF:  BCF    03.5
00E0:  BCF    06.0
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);    output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
00E1:  BSF    03.5
00E2:  BCF    06.7
00E3:  BCF    03.5
00E4:  BCF    06.7
00E5:  BSF    03.5
00E6:  BCF    09.0
00E7:  BCF    03.5
00E8:  BCF    09.0
00E9:  BSF    03.5
00EA:  BCF    06.6
00EB:  BCF    03.5
00EC:  BSF    06.6
00ED:  BSF    03.5
00EE:  BCF    09.1
00EF:  BCF    03.5
00F0:  BSF    09.1
....................           
....................          output_low(GREEN23);          output_low(YELLOW23);      output_high(RED23); 
00F1:  BSF    03.5
00F2:  BCF    06.5
00F3:  BCF    03.5
00F4:  BCF    06.5
00F5:  BSF    03.5
00F6:  BCF    06.4
00F7:  BCF    03.5
00F8:  BCF    06.4
00F9:  BSF    03.5
00FA:  BCF    06.3
00FB:  BCF    03.5
00FC:  BSF    06.3
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
00FD:  BSF    03.5
00FE:  BCF    06.7
00FF:  BCF    03.5
0100:  BCF    06.7
0101:  BSF    03.5
0102:  BCF    09.0
0103:  BCF    03.5
0104:  BCF    09.0
0105:  BSF    03.5
0106:  BCF    06.6
0107:  BCF    03.5
0108:  BSF    06.6
0109:  BSF    03.5
010A:  BCF    09.1
010B:  BCF    03.5
010C:  BSF    09.1
....................           
....................          count_14 = sec_green14 - sec; 
010D:  MOVF   29,W
010E:  SUBLW  0B
010F:  MOVWF  2B
....................          count_23 = sec_red23 - sec; 
0110:  MOVF   29,W
0111:  SUBLW  0F
0112:  MOVWF  2C
....................       }//sec=10 
0113:  GOTO   22B
....................       else if (sec <= sec_green14 + sec_yellow14) //YELLOW14, RED23 
0114:  MOVF   2A,F
0115:  BTFSS  03.2
0116:  GOTO   15A
0117:  MOVF   29,W
0118:  SUBLW  0F
0119:  BTFSS  03.0
011A:  GOTO   15A
....................       { 
....................          output_low(GREEN14);          output_high(YELLOW14);     output_low(RED14); 
011B:  BSF    03.5
011C:  BCF    06.2
011D:  BCF    03.5
011E:  BCF    06.2
011F:  BSF    03.5
0120:  BCF    06.1
0121:  BCF    03.5
0122:  BSF    06.1
0123:  BSF    03.5
0124:  BCF    06.0
0125:  BCF    03.5
0126:  BCF    06.0
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
0127:  BSF    03.5
0128:  BCF    06.7
0129:  BCF    03.5
012A:  BCF    06.7
012B:  BSF    03.5
012C:  BCF    09.0
012D:  BCF    03.5
012E:  BCF    09.0
012F:  BSF    03.5
0130:  BCF    06.6
0131:  BCF    03.5
0132:  BSF    06.6
0133:  BSF    03.5
0134:  BCF    09.1
0135:  BCF    03.5
0136:  BSF    09.1
....................           
....................          output_low(GREEN23);          output_low(YELLOW23);      output_high(RED23); 
0137:  BSF    03.5
0138:  BCF    06.5
0139:  BCF    03.5
013A:  BCF    06.5
013B:  BSF    03.5
013C:  BCF    06.4
013D:  BCF    03.5
013E:  BCF    06.4
013F:  BSF    03.5
0140:  BCF    06.3
0141:  BCF    03.5
0142:  BSF    06.3
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
0143:  BSF    03.5
0144:  BCF    06.7
0145:  BCF    03.5
0146:  BCF    06.7
0147:  BSF    03.5
0148:  BCF    09.0
0149:  BCF    03.5
014A:  BCF    09.0
014B:  BSF    03.5
014C:  BCF    06.6
014D:  BCF    03.5
014E:  BSF    06.6
014F:  BSF    03.5
0150:  BCF    09.1
0151:  BCF    03.5
0152:  BSF    09.1
....................  
....................          count_14 = sec_green14 + sec_yellow14 - sec; 
0153:  MOVF   29,W
0154:  SUBLW  0F
0155:  MOVWF  2B
....................          count_23 = sec_red23 - sec; 
0156:  MOVF   29,W
0157:  SUBLW  0F
0158:  MOVWF  2C
....................       }//sec=12 
0159:  GOTO   22B
....................       else if (sec <= sec_green14 + sec_yellow14 + sec_green23) //RED14, GREEN23 + TURN_LEFT23 
015A:  MOVF   2A,F
015B:  BTFSS  03.2
015C:  GOTO   1A0
015D:  MOVF   29,W
015E:  SUBLW  15
015F:  BTFSS  03.0
0160:  GOTO   1A0
....................       { 
....................          output_low(GREEN14);          output_low(YELLOW14);      output_high(RED14); 
0161:  BSF    03.5
0162:  BCF    06.2
0163:  BCF    03.5
0164:  BCF    06.2
0165:  BSF    03.5
0166:  BCF    06.1
0167:  BCF    03.5
0168:  BCF    06.1
0169:  BSF    03.5
016A:  BCF    06.0
016B:  BCF    03.5
016C:  BSF    06.0
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
016D:  BSF    03.5
016E:  BCF    06.7
016F:  BCF    03.5
0170:  BCF    06.7
0171:  BSF    03.5
0172:  BCF    09.0
0173:  BCF    03.5
0174:  BCF    09.0
0175:  BSF    03.5
0176:  BCF    06.6
0177:  BCF    03.5
0178:  BSF    06.6
0179:  BSF    03.5
017A:  BCF    09.1
017B:  BCF    03.5
017C:  BSF    09.1
....................           
....................          output_high(GREEN23);         output_low(YELLOW23);         output_low(RED23); 
017D:  BSF    03.5
017E:  BCF    06.5
017F:  BCF    03.5
0180:  BSF    06.5
0181:  BSF    03.5
0182:  BCF    06.4
0183:  BCF    03.5
0184:  BCF    06.4
0185:  BSF    03.5
0186:  BCF    06.3
0187:  BCF    03.5
0188:  BCF    06.3
....................          output_low(TURN_LEFT14);      output_high(TURN_LEFT23);     output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
0189:  BSF    03.5
018A:  BCF    06.7
018B:  BCF    03.5
018C:  BCF    06.7
018D:  BSF    03.5
018E:  BCF    09.0
018F:  BCF    03.5
0190:  BSF    09.0
0191:  BSF    03.5
0192:  BCF    06.6
0193:  BCF    03.5
0194:  BSF    06.6
0195:  BSF    03.5
0196:  BCF    09.1
0197:  BCF    03.5
0198:  BSF    09.1
....................  
....................          count_14 = sec_green14 + sec_yellow14 + sec_red14 - sec; 
0199:  MOVF   29,W
019A:  SUBLW  1E
019B:  MOVWF  2B
....................          count_23 = sec_green14 + sec_yellow14 + sec_green23 - sec; 
019C:  MOVF   29,W
019D:  SUBLW  15
019E:  MOVWF  2C
....................       }//sec=18 
019F:  GOTO   22B
....................       else if (sec <= sec_green14 + sec_yellow14 + sec_green23 + sec_yellow23) //RED14, YELLOW23 
01A0:  MOVF   2A,F
01A1:  BTFSS  03.2
01A2:  GOTO   1E6
01A3:  MOVF   29,W
01A4:  SUBLW  19
01A5:  BTFSS  03.0
01A6:  GOTO   1E6
....................       { 
....................          output_low(GREEN14);          output_low(YELLOW14);      output_high(RED14); 
01A7:  BSF    03.5
01A8:  BCF    06.2
01A9:  BCF    03.5
01AA:  BCF    06.2
01AB:  BSF    03.5
01AC:  BCF    06.1
01AD:  BCF    03.5
01AE:  BCF    06.1
01AF:  BSF    03.5
01B0:  BCF    06.0
01B1:  BCF    03.5
01B2:  BSF    06.0
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
01B3:  BSF    03.5
01B4:  BCF    06.7
01B5:  BCF    03.5
01B6:  BCF    06.7
01B7:  BSF    03.5
01B8:  BCF    09.0
01B9:  BCF    03.5
01BA:  BCF    09.0
01BB:  BSF    03.5
01BC:  BCF    06.6
01BD:  BCF    03.5
01BE:  BSF    06.6
01BF:  BSF    03.5
01C0:  BCF    09.1
01C1:  BCF    03.5
01C2:  BSF    09.1
....................           
....................          output_low(GREEN23);          output_high(YELLOW23);     output_low(RED23); 
01C3:  BSF    03.5
01C4:  BCF    06.5
01C5:  BCF    03.5
01C6:  BCF    06.5
01C7:  BSF    03.5
01C8:  BCF    06.4
01C9:  BCF    03.5
01CA:  BSF    06.4
01CB:  BSF    03.5
01CC:  BCF    06.3
01CD:  BCF    03.5
01CE:  BCF    06.3
....................          output_low(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
01CF:  BSF    03.5
01D0:  BCF    06.7
01D1:  BCF    03.5
01D2:  BCF    06.7
01D3:  BSF    03.5
01D4:  BCF    09.0
01D5:  BCF    03.5
01D6:  BCF    09.0
01D7:  BSF    03.5
01D8:  BCF    06.6
01D9:  BCF    03.5
01DA:  BSF    06.6
01DB:  BSF    03.5
01DC:  BCF    09.1
01DD:  BCF    03.5
01DE:  BSF    09.1
....................  
....................          count_14 = sec_green14 + sec_yellow14 + sec_red14 - sec; 
01DF:  MOVF   29,W
01E0:  SUBLW  1E
01E1:  MOVWF  2B
....................          count_23 = sec_green14 + sec_yellow14 + sec_green23 + sec_yellow23 - sec; 
01E2:  MOVF   29,W
01E3:  SUBLW  19
01E4:  MOVWF  2C
....................       }//sec=20 
01E5:  GOTO   22B
....................       else if (sec <= sec_green14 + sec_yellow14 + sec_red14) //RED14, RED23, TURN_LEFT14 
01E6:  MOVF   2A,F
01E7:  BTFSS  03.2
01E8:  GOTO   22B
01E9:  MOVF   29,W
01EA:  SUBLW  1E
01EB:  BTFSS  03.0
01EC:  GOTO   22B
....................       { 
....................          output_low(GREEN14);           output_low(YELLOW14);      output_high(RED14); 
01ED:  BSF    03.5
01EE:  BCF    06.2
01EF:  BCF    03.5
01F0:  BCF    06.2
01F1:  BSF    03.5
01F2:  BCF    06.1
01F3:  BCF    03.5
01F4:  BCF    06.1
01F5:  BSF    03.5
01F6:  BCF    06.0
01F7:  BCF    03.5
01F8:  BSF    06.0
....................          output_high(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
01F9:  BSF    03.5
01FA:  BCF    06.7
01FB:  BCF    03.5
01FC:  BSF    06.7
01FD:  BSF    03.5
01FE:  BCF    09.0
01FF:  BCF    03.5
0200:  BCF    09.0
0201:  BSF    03.5
0202:  BCF    06.6
0203:  BCF    03.5
0204:  BSF    06.6
0205:  BSF    03.5
0206:  BCF    09.1
0207:  BCF    03.5
0208:  BSF    09.1
....................           
....................          output_low(GREEN23);          output_low(YELLOW23);      output_high(RED23); 
0209:  BSF    03.5
020A:  BCF    06.5
020B:  BCF    03.5
020C:  BCF    06.5
020D:  BSF    03.5
020E:  BCF    06.4
020F:  BCF    03.5
0210:  BCF    06.4
0211:  BSF    03.5
0212:  BCF    06.3
0213:  BCF    03.5
0214:  BSF    06.3
....................          output_high(TURN_LEFT14);      output_low(TURN_LEFT23);   output_high(TURN_RIGHT14);     output_high(TURN_RIGHT23); 
0215:  BSF    03.5
0216:  BCF    06.7
0217:  BCF    03.5
0218:  BSF    06.7
0219:  BSF    03.5
021A:  BCF    09.0
021B:  BCF    03.5
021C:  BCF    09.0
021D:  BSF    03.5
021E:  BCF    06.6
021F:  BCF    03.5
0220:  BSF    06.6
0221:  BSF    03.5
0222:  BCF    09.1
0223:  BCF    03.5
0224:  BSF    09.1
....................  
....................          count_14 = sec_green14 + sec_yellow14 + sec_red14 - sec; 
0225:  MOVF   29,W
0226:  SUBLW  1E
0227:  MOVWF  2B
....................          count_23 = sec_green14 + sec_yellow14 + sec_red14 + sec_red23 - sec; 
0228:  MOVF   29,W
0229:  SUBLW  2D
022A:  MOVWF  2C
....................       } 
....................    } 
022B:  BCF    0A.3
022C:  BCF    0A.4
022D:  GOTO   588 (RETURN)
.................... } 
....................  
.................... //-------------------------7seg area 1----------------------------------------- 
.................... void led7seg_1(int8 count, int1 ctrl1_0, int1 ctrl1_1) 
*
0263:  MOVF   31,W
0264:  MOVWF  36
0265:  MOVLW  0A
0266:  MOVWF  37
0267:  CALL   22E
0268:  MOVF   78,W
0269:  MOVWF  34
026A:  MOVF   31,W
026B:  MOVWF  36
026C:  MOVLW  0A
026D:  MOVWF  37
026E:  CALL   22E
026F:  MOVF   77,W
0270:  MOVWF  35
.................... { 
....................    int8 tens = count / 10;//hang chuc 
....................    int8 ones = count % 10;// hang don vi 
....................  
....................    output_a(m7d[tens]); 
0271:  MOVF   34,W
0272:  CALL   031
0273:  MOVWF  36
0274:  BSF    03.5
0275:  CLRF   05
0276:  BCF    03.5
0277:  MOVF   36,W
0278:  MOVWF  05
....................    output_low(ctrl1_0); 
0279:  MOVF   32,W
027A:  MOVWF  36
027B:  CLRF   37
027C:  CLRF   39
027D:  CLRF   38
027E:  CALL   243
027F:  MOVF   32,W
0280:  MOVWF  36
0281:  CLRF   37
0282:  CLRF   39
0283:  MOVLW  80
0284:  MOVWF  38
0285:  CALL   243
....................    delay_ms(1); 
0286:  MOVLW  01
0287:  MOVWF  36
0288:  CALL   054
....................    output_high(ctrl1_0); 
0289:  MOVF   32,W
028A:  MOVWF  36
028B:  MOVLW  01
028C:  MOVWF  37
028D:  CLRF   39
028E:  CLRF   38
028F:  CALL   243
0290:  MOVF   32,W
0291:  MOVWF  36
0292:  CLRF   37
0293:  CLRF   39
0294:  MOVLW  80
0295:  MOVWF  38
0296:  CALL   243
....................  
....................    output_a(m7d[ones]); 
0297:  MOVF   35,W
0298:  CALL   031
0299:  MOVWF  36
029A:  BSF    03.5
029B:  CLRF   05
029C:  BCF    03.5
029D:  MOVF   36,W
029E:  MOVWF  05
....................    output_low(ctrl1_1); 
029F:  MOVF   33,W
02A0:  MOVWF  36
02A1:  CLRF   37
02A2:  CLRF   39
02A3:  CLRF   38
02A4:  CALL   243
02A5:  MOVF   33,W
02A6:  MOVWF  36
02A7:  CLRF   37
02A8:  CLRF   39
02A9:  MOVLW  80
02AA:  MOVWF  38
02AB:  CALL   243
....................    delay_ms(1); 
02AC:  MOVLW  01
02AD:  MOVWF  36
02AE:  CALL   054
....................    output_high(ctrl1_1); 
02AF:  MOVF   33,W
02B0:  MOVWF  36
02B1:  MOVLW  01
02B2:  MOVWF  37
02B3:  CLRF   39
02B4:  CLRF   38
02B5:  CALL   243
02B6:  MOVF   33,W
02B7:  MOVWF  36
02B8:  CLRF   37
02B9:  CLRF   39
02BA:  MOVLW  80
02BB:  MOVWF  38
02BC:  CALL   243
02BD:  BCF    0A.3
02BE:  BCF    0A.4
02BF:  GOTO   58F (RETURN)
.................... } 
....................  
.................... //---------------------------7seg area 2--------------------------------------- 
.................... void led7seg_2(int8 count, int1 ctrl2_0, int1 ctrl2_1) 
*
031D:  MOVF   31,W
031E:  MOVWF  36
031F:  MOVLW  0A
0320:  MOVWF  37
0321:  CALL   22E
0322:  MOVF   78,W
0323:  MOVWF  34
0324:  MOVF   31,W
0325:  MOVWF  36
0326:  MOVLW  0A
0327:  MOVWF  37
0328:  CALL   22E
0329:  MOVF   77,W
032A:  MOVWF  35
.................... { 
....................    int8 tens = count / 10;//hang chuc 
....................    int8 ones = count % 10;// hang don vi 
....................  
....................    output_a(m7d[tens]); 
032B:  MOVF   34,W
032C:  CALL   031
032D:  MOVWF  36
032E:  BSF    03.5
032F:  CLRF   05
0330:  BCF    03.5
0331:  MOVF   36,W
0332:  MOVWF  05
....................    output_low(ctrl2_0); 
0333:  MOVF   32,W
0334:  MOVWF  36
0335:  CLRF   37
0336:  CLRF   39
0337:  CLRF   38
0338:  CALL   243
0339:  MOVF   32,W
033A:  MOVWF  36
033B:  CLRF   37
033C:  CLRF   39
033D:  MOVLW  80
033E:  MOVWF  38
033F:  CALL   243
....................    delay_ms(1); 
0340:  MOVLW  01
0341:  MOVWF  36
0342:  CALL   054
....................    output_high(ctrl2_0); 
0343:  MOVF   32,W
0344:  MOVWF  36
0345:  MOVLW  01
0346:  MOVWF  37
0347:  CLRF   39
0348:  CLRF   38
0349:  CALL   243
034A:  MOVF   32,W
034B:  MOVWF  36
034C:  CLRF   37
034D:  CLRF   39
034E:  MOVLW  80
034F:  MOVWF  38
0350:  CALL   243
....................  
....................    output_a(m7d[ones]); 
0351:  MOVF   35,W
0352:  CALL   031
0353:  MOVWF  36
0354:  BSF    03.5
0355:  CLRF   05
0356:  BCF    03.5
0357:  MOVF   36,W
0358:  MOVWF  05
....................    output_low(ctrl2_1); 
0359:  MOVF   33,W
035A:  MOVWF  36
035B:  CLRF   37
035C:  CLRF   39
035D:  CLRF   38
035E:  CALL   243
035F:  MOVF   33,W
0360:  MOVWF  36
0361:  CLRF   37
0362:  CLRF   39
0363:  MOVLW  80
0364:  MOVWF  38
0365:  CALL   243
....................    delay_ms(1); 
0366:  MOVLW  01
0367:  MOVWF  36
0368:  CALL   054
....................    output_high(ctrl2_1); 
0369:  MOVF   33,W
036A:  MOVWF  36
036B:  MOVLW  01
036C:  MOVWF  37
036D:  CLRF   39
036E:  CLRF   38
036F:  CALL   243
0370:  MOVF   33,W
0371:  MOVWF  36
0372:  CLRF   37
0373:  CLRF   39
0374:  MOVLW  80
0375:  MOVWF  38
0376:  CALL   243
0377:  BCF    0A.3
0378:  BCF    0A.4
0379:  GOTO   59D (RETURN)
.................... } 
....................  
.................... //-----------------------------7seg area 3------------------------------------- 
.................... void led7seg_3(int8 count, int1 ctrl3_0, int1 ctrl3_1) 
037A:  MOVF   31,W
037B:  MOVWF  36
037C:  MOVLW  0A
037D:  MOVWF  37
037E:  CALL   22E
037F:  MOVF   78,W
0380:  MOVWF  34
0381:  MOVF   31,W
0382:  MOVWF  36
0383:  MOVLW  0A
0384:  MOVWF  37
0385:  CALL   22E
0386:  MOVF   77,W
0387:  MOVWF  35
.................... { 
....................    int8 tens = count / 10;//hang chuc 
....................    int8 ones = count % 10;// hang don vi 
....................  
....................    output_a(m7d[tens]); 
0388:  MOVF   34,W
0389:  CALL   031
038A:  MOVWF  36
038B:  BSF    03.5
038C:  CLRF   05
038D:  BCF    03.5
038E:  MOVF   36,W
038F:  MOVWF  05
....................    output_low(ctrl3_0); 
0390:  MOVF   32,W
0391:  MOVWF  36
0392:  CLRF   37
0393:  CLRF   39
0394:  CLRF   38
0395:  CALL   243
0396:  MOVF   32,W
0397:  MOVWF  36
0398:  CLRF   37
0399:  CLRF   39
039A:  MOVLW  80
039B:  MOVWF  38
039C:  CALL   243
....................    delay_ms(1); 
039D:  MOVLW  01
039E:  MOVWF  36
039F:  CALL   054
....................    output_high(ctrl3_0); 
03A0:  MOVF   32,W
03A1:  MOVWF  36
03A2:  MOVLW  01
03A3:  MOVWF  37
03A4:  CLRF   39
03A5:  CLRF   38
03A6:  CALL   243
03A7:  MOVF   32,W
03A8:  MOVWF  36
03A9:  CLRF   37
03AA:  CLRF   39
03AB:  MOVLW  80
03AC:  MOVWF  38
03AD:  CALL   243
....................  
....................    output_a(m7d[ones]); 
03AE:  MOVF   35,W
03AF:  CALL   031
03B0:  MOVWF  36
03B1:  BSF    03.5
03B2:  CLRF   05
03B3:  BCF    03.5
03B4:  MOVF   36,W
03B5:  MOVWF  05
....................    output_low(ctrl3_1); 
03B6:  MOVF   33,W
03B7:  MOVWF  36
03B8:  CLRF   37
03B9:  CLRF   39
03BA:  CLRF   38
03BB:  CALL   243
03BC:  MOVF   33,W
03BD:  MOVWF  36
03BE:  CLRF   37
03BF:  CLRF   39
03C0:  MOVLW  80
03C1:  MOVWF  38
03C2:  CALL   243
....................    delay_ms(1); 
03C3:  MOVLW  01
03C4:  MOVWF  36
03C5:  CALL   054
....................    output_high(ctrl3_1); 
03C6:  MOVF   33,W
03C7:  MOVWF  36
03C8:  MOVLW  01
03C9:  MOVWF  37
03CA:  CLRF   39
03CB:  CLRF   38
03CC:  CALL   243
03CD:  MOVF   33,W
03CE:  MOVWF  36
03CF:  CLRF   37
03D0:  CLRF   39
03D1:  MOVLW  80
03D2:  MOVWF  38
03D3:  CALL   243
03D4:  BCF    0A.3
03D5:  BCF    0A.4
03D6:  GOTO   5A4 (RETURN)
.................... } 
....................  
.................... //---------------------------7seg area 4--------------------------------------- 
.................... void led7seg_4(int8 count, int1 ctrl4_0, int1 ctrl4_1) 
*
02C0:  MOVF   31,W
02C1:  MOVWF  36
02C2:  MOVLW  0A
02C3:  MOVWF  37
02C4:  CALL   22E
02C5:  MOVF   78,W
02C6:  MOVWF  34
02C7:  MOVF   31,W
02C8:  MOVWF  36
02C9:  MOVLW  0A
02CA:  MOVWF  37
02CB:  CALL   22E
02CC:  MOVF   77,W
02CD:  MOVWF  35
.................... { 
....................    int8 tens = count / 10;//hang chuc 
....................    int8 ones = count % 10;// hang don vi 
....................  
....................    output_a(m7d[tens]); 
02CE:  MOVF   34,W
02CF:  CALL   031
02D0:  MOVWF  36
02D1:  BSF    03.5
02D2:  CLRF   05
02D3:  BCF    03.5
02D4:  MOVF   36,W
02D5:  MOVWF  05
....................    output_low(ctrl4_0); 
02D6:  MOVF   32,W
02D7:  MOVWF  36
02D8:  CLRF   37
02D9:  CLRF   39
02DA:  CLRF   38
02DB:  CALL   243
02DC:  MOVF   32,W
02DD:  MOVWF  36
02DE:  CLRF   37
02DF:  CLRF   39
02E0:  MOVLW  80
02E1:  MOVWF  38
02E2:  CALL   243
....................    delay_ms(1); 
02E3:  MOVLW  01
02E4:  MOVWF  36
02E5:  CALL   054
....................    output_high(ctrl4_0); 
02E6:  MOVF   32,W
02E7:  MOVWF  36
02E8:  MOVLW  01
02E9:  MOVWF  37
02EA:  CLRF   39
02EB:  CLRF   38
02EC:  CALL   243
02ED:  MOVF   32,W
02EE:  MOVWF  36
02EF:  CLRF   37
02F0:  CLRF   39
02F1:  MOVLW  80
02F2:  MOVWF  38
02F3:  CALL   243
....................  
....................    output_a(m7d[ones]); 
02F4:  MOVF   35,W
02F5:  CALL   031
02F6:  MOVWF  36
02F7:  BSF    03.5
02F8:  CLRF   05
02F9:  BCF    03.5
02FA:  MOVF   36,W
02FB:  MOVWF  05
....................    output_low(ctrl4_1); 
02FC:  MOVF   33,W
02FD:  MOVWF  36
02FE:  CLRF   37
02FF:  CLRF   39
0300:  CLRF   38
0301:  CALL   243
0302:  MOVF   33,W
0303:  MOVWF  36
0304:  CLRF   37
0305:  CLRF   39
0306:  MOVLW  80
0307:  MOVWF  38
0308:  CALL   243
....................    delay_ms(1); 
0309:  MOVLW  01
030A:  MOVWF  36
030B:  CALL   054
....................    output_high(ctrl4_1); 
030C:  MOVF   33,W
030D:  MOVWF  36
030E:  MOVLW  01
030F:  MOVWF  37
0310:  CLRF   39
0311:  CLRF   38
0312:  CALL   243
0313:  MOVF   33,W
0314:  MOVWF  36
0315:  CLRF   37
0316:  CLRF   39
0317:  MOVLW  80
0318:  MOVWF  38
0319:  CALL   243
031A:  BCF    0A.3
031B:  BCF    0A.4
031C:  GOTO   596 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////mode1 
.................... void adjust_mode() 
.................... { 
.................... //---------------------------BTN RED, GREEN, ALL-RED -------------------------- 
....................    if(input(RED) == 0)         
*
03D7:  BSF    30.1
03D8:  MOVF   30,W
03D9:  BSF    03.5
03DA:  MOVWF  07
03DB:  BCF    03.5
03DC:  BTFSC  07.1
03DD:  GOTO   3F5
....................    { 
....................       delay_ms(20); 
03DE:  MOVLW  14
03DF:  MOVWF  36
03E0:  CALL   054
....................       if(input(RED) == 0) 
03E1:  BSF    30.1
03E2:  MOVF   30,W
03E3:  BSF    03.5
03E4:  MOVWF  07
03E5:  BCF    03.5
03E6:  BTFSC  07.1
03E7:  GOTO   3F5
....................       { 
....................          light=1; 
03E8:  MOVLW  01
03E9:  MOVWF  2E
....................          output_b(0); 
03EA:  BSF    03.5
03EB:  CLRF   06
03EC:  BCF    03.5
03ED:  CLRF   06
....................          while(input(RED) == 0); 
03EE:  BSF    30.1
03EF:  MOVF   30,W
03F0:  BSF    03.5
03F1:  MOVWF  07
03F2:  BCF    03.5
03F3:  BTFSS  07.1
03F4:  GOTO   3EE
....................       } 
....................    } 
....................     
....................    if(input(GREEN) == 0)         
03F5:  BSF    30.3
03F6:  MOVF   30,W
03F7:  BSF    03.5
03F8:  MOVWF  07
03F9:  BCF    03.5
03FA:  BTFSC  07.3
03FB:  GOTO   413
....................    { 
....................       delay_ms(20); 
03FC:  MOVLW  14
03FD:  MOVWF  36
03FE:  CALL   054
....................       if(input(GREEN) == 0) 
03FF:  BSF    30.3
0400:  MOVF   30,W
0401:  BSF    03.5
0402:  MOVWF  07
0403:  BCF    03.5
0404:  BTFSC  07.3
0405:  GOTO   413
....................       { 
....................          light=2; 
0406:  MOVLW  02
0407:  MOVWF  2E
....................          output_b(0); 
0408:  BSF    03.5
0409:  CLRF   06
040A:  BCF    03.5
040B:  CLRF   06
....................          while(input(GREEN) == 0); 
040C:  BSF    30.3
040D:  MOVF   30,W
040E:  BSF    03.5
040F:  MOVWF  07
0410:  BCF    03.5
0411:  BTFSS  07.3
0412:  GOTO   40C
....................       } 
....................    } 
....................     
....................    if(input(ALL_RED) == 0) 
0413:  BSF    30.2
0414:  MOVF   30,W
0415:  BSF    03.5
0416:  MOVWF  07
0417:  BCF    03.5
0418:  BTFSC  07.2
0419:  GOTO   431
....................    { 
....................       delay_ms(20); 
041A:  MOVLW  14
041B:  MOVWF  36
041C:  CALL   054
....................       if(input(ALL_RED) == 0) 
041D:  BSF    30.2
041E:  MOVF   30,W
041F:  BSF    03.5
0420:  MOVWF  07
0421:  BCF    03.5
0422:  BTFSC  07.2
0423:  GOTO   431
....................       { 
....................          light=3; 
0424:  MOVLW  03
0425:  MOVWF  2E
....................          output_b(0); 
0426:  BSF    03.5
0427:  CLRF   06
0428:  BCF    03.5
0429:  CLRF   06
....................          while(input(ALL_RED) == 0); 
042A:  BSF    30.2
042B:  MOVF   30,W
042C:  BSF    03.5
042D:  MOVWF  07
042E:  BCF    03.5
042F:  BTFSS  07.2
0430:  GOTO   42A
....................       } 
....................    } 
....................     
....................    switch(light) 
0431:  MOVF   2E,W
0432:  XORLW  01
0433:  BTFSC  03.2
0434:  GOTO   43C
0435:  XORLW  03
0436:  BTFSC  03.2
0437:  GOTO   445
0438:  XORLW  01
0439:  BTFSC  03.2
043A:  GOTO   44E
043B:  GOTO   456
....................    { 
....................       case 1: 
....................          output_high(RED14);  
043C:  BSF    03.5
043D:  BCF    06.0
043E:  BCF    03.5
043F:  BSF    06.0
....................          output_high(GREEN23); 
0440:  BSF    03.5
0441:  BCF    06.5
0442:  BCF    03.5
0443:  BSF    06.5
....................          break; 
0444:  GOTO   456
....................       case 2: 
....................          output_high(GREEN14);   
0445:  BSF    03.5
0446:  BCF    06.2
0447:  BCF    03.5
0448:  BSF    06.2
....................          output_high(RED23); 
0449:  BSF    03.5
044A:  BCF    06.3
044B:  BCF    03.5
044C:  BSF    06.3
....................          break; 
044D:  GOTO   456
....................       case 3: 
....................          output_high(RED14);   
044E:  BSF    03.5
044F:  BCF    06.0
0450:  BCF    03.5
0451:  BSF    06.0
....................          output_high(RED23); 
0452:  BSF    03.5
0453:  BCF    06.3
0454:  BCF    03.5
0455:  BSF    06.3
....................          break; 
....................    } 
.................... //-----------------------------BTN RIGHT14, LEFT14-----------------------------    
....................    if(input(RIGHT14)  == 0) 
0456:  BSF    30.4
0457:  MOVF   30,W
0458:  BSF    03.5
0459:  MOVWF  07
045A:  BCF    03.5
045B:  BTFSC  07.4
045C:  GOTO   478
....................    { 
....................       delay_ms(20); 
045D:  MOVLW  14
045E:  MOVWF  36
045F:  CALL   054
....................       if(input(RIGHT14) == 0) 
0460:  BSF    30.4
0461:  MOVF   30,W
0462:  BSF    03.5
0463:  MOVWF  07
0464:  BCF    03.5
0465:  BTFSC  07.4
0466:  GOTO   478
....................       { 
....................          if(right_14 < 1) 
0467:  MOVLW  00
0468:  BTFSC  2F.0
0469:  MOVLW  01
046A:  XORLW  00
046B:  BTFSS  03.2
046C:  GOTO   470
....................          { 
....................             right_14++; 
046D:  MOVLW  01
046E:  XORWF  2F,F
....................          } 
046F:  GOTO   471
....................          else 
....................          { 
....................             right_14=0; 
0470:  BCF    2F.0
....................          } 
....................          while(input(RIGHT14) == 0); 
0471:  BSF    30.4
0472:  MOVF   30,W
0473:  BSF    03.5
0474:  MOVWF  07
0475:  BCF    03.5
0476:  BTFSS  07.4
0477:  GOTO   471
....................       } 
....................    } 
....................     
....................    switch(right_14) 
0478:  MOVLW  00
0479:  BTFSC  2F.0
047A:  MOVLW  01
047B:  XORLW  00
047C:  BTFSC  03.2
047D:  GOTO   482
047E:  XORLW  01
047F:  BTFSC  03.2
0480:  GOTO   487
0481:  GOTO   48B
....................    { 
....................       case 0: 
....................          output_low(TURN_RIGHT14); 
0482:  BSF    03.5
0483:  BCF    06.6
0484:  BCF    03.5
0485:  BCF    06.6
....................          break; 
0486:  GOTO   48B
....................       case 1: 
....................          output_high(TURN_RIGHT14); 
0487:  BSF    03.5
0488:  BCF    06.6
0489:  BCF    03.5
048A:  BSF    06.6
....................          break; 
....................    } 
....................     
....................    if(input(LEFT14)  == 0) 
048B:  BSF    30.5
048C:  MOVF   30,W
048D:  BSF    03.5
048E:  MOVWF  07
048F:  BCF    03.5
0490:  BTFSC  07.5
0491:  GOTO   4AD
....................    { 
....................       delay_ms(20); 
0492:  MOVLW  14
0493:  MOVWF  36
0494:  CALL   054
....................       if(input(LEFT14) == 0) 
0495:  BSF    30.5
0496:  MOVF   30,W
0497:  BSF    03.5
0498:  MOVWF  07
0499:  BCF    03.5
049A:  BTFSC  07.5
049B:  GOTO   4AD
....................       { 
....................          if(left_14 < 1) 
049C:  MOVLW  00
049D:  BTFSC  2F.1
049E:  MOVLW  01
049F:  XORLW  00
04A0:  BTFSS  03.2
04A1:  GOTO   4A5
....................          { 
....................             left_14++; 
04A2:  MOVLW  02
04A3:  XORWF  2F,F
....................          } 
04A4:  GOTO   4A6
....................          else 
....................          { 
....................             left_14=0; 
04A5:  BCF    2F.1
....................          } 
....................          while(input(LEFT14) == 0); 
04A6:  BSF    30.5
04A7:  MOVF   30,W
04A8:  BSF    03.5
04A9:  MOVWF  07
04AA:  BCF    03.5
04AB:  BTFSS  07.5
04AC:  GOTO   4A6
....................       } 
....................    } 
....................     
....................    switch(left_14) 
04AD:  MOVLW  00
04AE:  BTFSC  2F.1
04AF:  MOVLW  01
04B0:  XORLW  00
04B1:  BTFSC  03.2
04B2:  GOTO   4B7
04B3:  XORLW  01
04B4:  BTFSC  03.2
04B5:  GOTO   4BC
04B6:  GOTO   4C0
....................    { 
....................       case 0: 
....................          output_low(TURN_LEFT14); 
04B7:  BSF    03.5
04B8:  BCF    06.7
04B9:  BCF    03.5
04BA:  BCF    06.7
....................          break; 
04BB:  GOTO   4C0
....................       case 1: 
....................          output_high(TURN_LEFT14); 
04BC:  BSF    03.5
04BD:  BCF    06.7
04BE:  BCF    03.5
04BF:  BSF    06.7
....................          break; 
....................    } 
.................... //-----------------------------BTN RIGHT23, LEFT23-----------------------------    
....................    if(input(RIGHT23)  == 0) 
04C0:  BSF    30.6
04C1:  MOVF   30,W
04C2:  BSF    03.5
04C3:  MOVWF  07
04C4:  BCF    03.5
04C5:  BTFSC  07.6
04C6:  GOTO   4E2
....................    { 
....................       delay_ms(20); 
04C7:  MOVLW  14
04C8:  MOVWF  36
04C9:  CALL   054
....................       if(input(RIGHT23) == 0) 
04CA:  BSF    30.6
04CB:  MOVF   30,W
04CC:  BSF    03.5
04CD:  MOVWF  07
04CE:  BCF    03.5
04CF:  BTFSC  07.6
04D0:  GOTO   4E2
....................       { 
....................          if(right_23 < 1) 
04D1:  MOVLW  00
04D2:  BTFSC  2F.2
04D3:  MOVLW  01
04D4:  XORLW  00
04D5:  BTFSS  03.2
04D6:  GOTO   4DA
....................          { 
....................             right_23++; 
04D7:  MOVLW  04
04D8:  XORWF  2F,F
....................          } 
04D9:  GOTO   4DB
....................          else 
....................          { 
....................             right_23=0; 
04DA:  BCF    2F.2
....................          } 
....................          while(input(RIGHT23) == 0); 
04DB:  BSF    30.6
04DC:  MOVF   30,W
04DD:  BSF    03.5
04DE:  MOVWF  07
04DF:  BCF    03.5
04E0:  BTFSS  07.6
04E1:  GOTO   4DB
....................       } 
....................    } 
....................     
....................    switch(right_23) 
04E2:  MOVLW  00
04E3:  BTFSC  2F.2
04E4:  MOVLW  01
04E5:  XORLW  00
04E6:  BTFSC  03.2
04E7:  GOTO   4EC
04E8:  XORLW  01
04E9:  BTFSC  03.2
04EA:  GOTO   4F1
04EB:  GOTO   4F5
....................    { 
....................       case 0: 
....................          output_low(TURN_RIGHT23); 
04EC:  BSF    03.5
04ED:  BCF    09.1
04EE:  BCF    03.5
04EF:  BCF    09.1
....................          break; 
04F0:  GOTO   4F5
....................       case 1: 
....................          output_high(TURN_RIGHT23); 
04F1:  BSF    03.5
04F2:  BCF    09.1
04F3:  BCF    03.5
04F4:  BSF    09.1
....................          break; 
....................    } 
....................     
....................    if(input(LEFT23)  == 0) 
04F5:  BSF    30.7
04F6:  MOVF   30,W
04F7:  BSF    03.5
04F8:  MOVWF  07
04F9:  BCF    03.5
04FA:  BTFSC  07.7
04FB:  GOTO   517
....................    { 
....................       delay_ms(20); 
04FC:  MOVLW  14
04FD:  MOVWF  36
04FE:  CALL   054
....................       if(input(LEFT23) == 0) 
04FF:  BSF    30.7
0500:  MOVF   30,W
0501:  BSF    03.5
0502:  MOVWF  07
0503:  BCF    03.5
0504:  BTFSC  07.7
0505:  GOTO   517
....................       { 
....................          if(left_23 < 1) 
0506:  MOVLW  00
0507:  BTFSC  2F.3
0508:  MOVLW  01
0509:  XORLW  00
050A:  BTFSS  03.2
050B:  GOTO   50F
....................          { 
....................             left_23++; 
050C:  MOVLW  08
050D:  XORWF  2F,F
....................          } 
050E:  GOTO   510
....................          else 
....................          { 
....................             left_23=0; 
050F:  BCF    2F.3
....................          } 
....................          while(input(LEFT23) == 0); 
0510:  BSF    30.7
0511:  MOVF   30,W
0512:  BSF    03.5
0513:  MOVWF  07
0514:  BCF    03.5
0515:  BTFSS  07.7
0516:  GOTO   510
....................       } 
....................    } 
....................     
....................    switch(left_23) 
0517:  MOVLW  00
0518:  BTFSC  2F.3
0519:  MOVLW  01
051A:  XORLW  00
051B:  BTFSC  03.2
051C:  GOTO   521
051D:  XORLW  01
051E:  BTFSC  03.2
051F:  GOTO   526
0520:  GOTO   52A
....................    { 
....................       case 0: 
....................          output_low(TURN_LEFT23); 
0521:  BSF    03.5
0522:  BCF    09.0
0523:  BCF    03.5
0524:  BCF    09.0
....................          break; 
0525:  GOTO   52A
....................       case 1: 
....................          output_high(TURN_LEFT23); 
0526:  BSF    03.5
0527:  BCF    09.0
0528:  BCF    03.5
0529:  BSF    09.0
....................          break; 
....................    } 
052A:  BCF    0A.3
052B:  BCF    0A.4
052C:  GOTO   5B1 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////mode2 
.................... void yellow_toggle() 
.................... { 
....................    if(bdn_tmr1 >=2 ) 
052D:  MOVF   28,F
052E:  BTFSS  03.2
052F:  GOTO   534
0530:  MOVF   27,W
0531:  SUBLW  01
0532:  BTFSC  03.0
0533:  GOTO   540
....................    { 
....................       bdn_tmr1 = 0; 
0534:  CLRF   28
0535:  CLRF   27
....................       output_toggle(YELLOW14); 
0536:  BSF    03.5
0537:  BCF    06.1
0538:  MOVLW  02
0539:  BCF    03.5
053A:  XORWF  06,F
....................       output_toggle(YELLOW23); 
053B:  BSF    03.5
053C:  BCF    06.4
053D:  MOVLW  10
053E:  BCF    03.5
053F:  XORWF  06,F
....................    } 
0540:  BCF    0A.3
0541:  BCF    0A.4
0542:  GOTO   5C0 (RETURN)
.................... } 
.................... ///////////////////////////////////////////////////////////////////////////////main 
.................... void main() 
0543:  MOVF   03,W
0544:  ANDLW  1F
0545:  MOVWF  03
0546:  MOVLW  71
0547:  BSF    03.5
0548:  MOVWF  0F
0549:  MOVF   0F,W
054A:  BCF    03.5
054B:  CLRF   28
054C:  CLRF   27
054D:  CLRF   2A
054E:  CLRF   29
054F:  CLRF   2B
0550:  CLRF   2C
0551:  CLRF   2D
0552:  CLRF   2E
0553:  BCF    2F.0
0554:  BCF    2F.1
0555:  BCF    2F.2
0556:  BCF    2F.3
0557:  MOVLW  FF
0558:  MOVWF  30
0559:  BSF    03.5
055A:  BSF    03.6
055B:  MOVF   09,W
055C:  ANDLW  C0
055D:  MOVWF  09
055E:  BCF    03.6
055F:  BCF    1F.4
0560:  BCF    1F.5
0561:  MOVLW  00
0562:  BSF    03.6
0563:  MOVWF  08
0564:  BCF    03.5
0565:  CLRF   07
0566:  CLRF   08
0567:  CLRF   09
0568:  BCF    03.7
.................... { 
....................    set_tris_a(0);//7seg 
0569:  MOVLW  00
056A:  BSF    03.5
056B:  BCF    03.6
056C:  MOVWF  05
....................    set_tris_b(0);//led 
056D:  MOVWF  06
....................    set_tris_d(0);//control 
056E:  MOVWF  08
....................    set_tris_e(0);//led 
056F:  BCF    09.0
0570:  BCF    09.1
0571:  BCF    09.2
0572:  BCF    09.3
....................    set_tris_c(0xff);//button 
0573:  MOVLW  FF
0574:  MOVWF  07
0575:  BCF    03.5
0576:  MOVWF  30
....................     
....................    //timing 250ms 
....................    setup_timer_1(t1_internal | t1_div_by_8); 
0577:  MOVLW  35
0578:  MOVWF  10
....................    set_timer1(3036); 
0579:  CLRF   0E
057A:  MOVLW  0B
057B:  MOVWF  0F
057C:  MOVLW  DC
057D:  MOVWF  0E
....................     
....................    enable_interrupts(int_timer1); 
057E:  BSF    03.5
057F:  BSF    0C.0
....................    enable_interrupts(global); 
0580:  MOVLW  C0
0581:  BCF    03.5
0582:  IORWF  0B,F
....................     
....................    while(true) 
....................    { 
....................       select_mode(); 
0583:  GOTO   068
....................       if(sel == 0) 
0584:  MOVF   2D,F
0585:  BTFSS  03.2
0586:  GOTO   5A5
....................       { 
....................          traffic_light(); 
0587:  GOTO   0C2
....................          led7seg_1(count_14,pin_d0,pin_d1); 
0588:  MOVF   2B,W
0589:  MOVWF  31
058A:  MOVLW  40
058B:  MOVWF  32
058C:  MOVLW  41
058D:  MOVWF  33
058E:  GOTO   263
....................          led7seg_4(count_14,pin_d6,pin_d7); 
058F:  MOVF   2B,W
0590:  MOVWF  31
0591:  MOVLW  46
0592:  MOVWF  32
0593:  MOVLW  47
0594:  MOVWF  33
0595:  GOTO   2C0
....................          led7seg_2(count_23,pin_d2,pin_d3); 
0596:  MOVF   2C,W
0597:  MOVWF  31
0598:  MOVLW  42
0599:  MOVWF  32
059A:  MOVLW  43
059B:  MOVWF  33
059C:  GOTO   31D
....................          led7seg_3(count_23,pin_d4,pin_d5); 
059D:  MOVF   2C,W
059E:  MOVWF  31
059F:  MOVLW  44
05A0:  MOVWF  32
05A1:  MOVLW  45
05A2:  MOVWF  33
05A3:  GOTO   37A
....................       } 
05A4:  GOTO   5C0
....................       else if(sel == 1) 
05A5:  DECFSZ 2D,W
05A6:  GOTO   5B2
....................       { 
....................          //turn off 7seg 
....................          output_d(0xff); 
05A7:  BSF    03.5
05A8:  CLRF   08
05A9:  MOVLW  FF
05AA:  BCF    03.5
05AB:  MOVWF  08
....................          output_a(0xff); 
05AC:  BSF    03.5
05AD:  CLRF   05
05AE:  BCF    03.5
05AF:  MOVWF  05
....................           
....................          adjust_mode(); 
05B0:  GOTO   3D7
....................       } 
05B1:  GOTO   5C0
....................       else if(sel == 2) 
05B2:  MOVF   2D,W
05B3:  SUBLW  02
05B4:  BTFSS  03.2
05B5:  GOTO   5C0
....................       { 
....................          //turn off 7seg 
....................          output_d(0xff); 
05B6:  BSF    03.5
05B7:  CLRF   08
05B8:  MOVLW  FF
05B9:  BCF    03.5
05BA:  MOVWF  08
....................          output_a(0xff); 
05BB:  BSF    03.5
05BC:  CLRF   05
05BD:  BCF    03.5
05BE:  MOVWF  05
....................  
....................          yellow_toggle(); 
05BF:  GOTO   52D
....................       } 
05C0:  GOTO   583
....................    } 
.................... } 
05C1:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
